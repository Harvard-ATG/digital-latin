# This is an example .env file for the application.
# Copy this file to .env and fill in the required values.
# Make sure to keep this file secure and do not commit it to version control.

# Google Gemini API settings
# Specify the models you want to use with Google Gemini API.
# Allowed models can be found in the Google Gemini documentation.
# Example: gemini-2.5-pro, gemini-1.5-flash
# You can use multiple models by separating them with commas.
GOOGLE_ALLOWED_MODELS=gemini-2.5-pro,gemini-1.5-flash

# The Google Gemini API base URL is used to make requests to the Gemini API.
GEMINI_API_BASE_URL=https://go.apis.huit.harvard.edu/ais-google-gemini

# The Google Gemini API key is required to authenticate requests.
# Make sure to replace 'your_google_api_key_here' with your actual Google API key.
GOOGLE_API_KEY=your_google_api_key_here

# Database backend: 'sqlite' or 'postgres'

# This setting determines whether the backend will use a database or not, instead logging to a file.
# Set to `true` to skip all database interactions (useful for local dev/testing). | `false` or `true`    
SKIP_DB=false    

# For SQLite, set SESSION_DB_BACKEND=sqlite and specify the SQLITE_DB_PATH
# For PostgreSQL, set SESSION_DB_BACKEND=postgres and specify the connection settings below

# For development, SQLite can be used for simplicity
# SQLite settings
# SQLITE_DB_BACKEND=sqlite
# SQLite database path
# SQLITE_DB_PATH=app/sessions.db
# SQLite database path

# For production, use PostgreSQL for better performance and scalability
SESSION_DB_BACKEND=postgres

# PostgreSQL connection settings
DB_NAME=sessions
DB_HOST=127.0.0.1
DB_PORT=5432
# Secure PostgreSQL connection settings
DB_USER=your_postgres_user_here
DB_PASSWORD=your_postgres_password_here